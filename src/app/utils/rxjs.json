[
	{
		"name": "Observable",
		"links": ["https://rxjs.dev/guide/observable"],
		"videos": [
			"https://www.youtube.com/watch?v=0qdw9gK1AZ0&ab_channel=LeelaWebDev"
		],
		"shortDescription": "Um observable é um objeto único semelhante a uma promise que pode ajudar a gerenciar o código assíncrono",
		"listOfDescription": [
			"Um observable é um objeto único semelhante a uma promise que pode ajudar a gerenciar o código assíncrono",
			"Um observable é um objeto que pode ser observado, ou seja, pode ser notificado quando o valor muda",
			"Com Observables, conseguimos lidar com transferência de dados assíncrona. Muitas vezes, seu uso é semelhante ao de Promises do Javascript, porém, podendo ser uma fonte de transferência de dados contínua, ou seja, o Observable poderá emitir dados várias vezes em momentos distintos de sua existência.",
			"Emite notificações sempre que ocorre uma mudança em um de seus itens e a partir disso podemos executar uma ação.",
			"Observables são uma forma de comunicação entre componentes, serviços e outros Observables."
		],
		"tips": ["custom observable", "custom observer", "observable próprio"],
		"listOfImages": ["observer-1", "observer-2"]
	},
	{
		"name": "Subject",
		"links": [
			"https://rxjs.dev/guide/subject",
			"https://www.learnrxjs.io/learn-rxjs/subjects/subject"
		],
		"videos": [
			"https://www.youtube.com/watch?v=-7JPqeHeNRE&ab_channel=MoldeoInteractive"
		],
		"shortDescription": "Um subject é um observable que pode ser subscrito e emitido",
		"listOfDescription": [
			"Um Subject é um tipo especial de Observable que permite que valores sejam disparados para muitos Observadores.",
			"Enquanto os Observables simples são unicast (cada Observer inscrito possui uma execução independente do Observable), os Subjects são multicast. Um Subject é como um Observável, mas pode transmitir para muitos Observadores.",
			"Um Subject é um objeto que pode ser observado, ou seja, pode ser notificado quando o valor muda",
			"Todo subject é um observable e você pode se inscrever nele",
			"Todo subject é um observer. É um objeto com os métodos next(v), error(e) e complete(). Para alimentar um novo valor para o Subject, basta chamar next(theValue), e ele será multicast para os Observadores cadastrados para escutar o Subject."
		],
		"tips": [
			"usado como um observable",
			"emitir mudanças",
			"notificar mudanças",
			"multicast",
			"notifica sempre que há mudanças"
		],
		"listOfImages": ["subject-1"]
	},
	{
		"name": "Behavior Subject",
		"links": [
			"https://rxjs.dev/guide/subject",
			"https://www.learnrxjs.io/learn-rxjs/subjects/behaviorsubject",
			"https://indepth.dev/reference/rxjs/subjects/behavior-subject"
		],
		"videos": [
			"https://www.youtube.com/watch?v=vUC-ospC-t0&ab_channel=MoldeoInteractive"
		],
		"shortDescription": "Um Behavior Subject é um subject que inicia com um valor inicial",
		"listOfDescription": [
			"Em um Behavior Subject, o primeiro valor enviado é o valor inicial.",
			"Requer um valor inicial e emite o valor atual para novos subscribers.",
			"Quando um novo valor é enviado, o Behavior Subject retorna o novo valor, e os Observadores são notificados.",
			"O Behavior Subject precisa, obrigatoriamente, iniciar com um valor.",
			"É uma variação do subject, mas com um valor inicial.",
			"Ele armazena o último valor emitido para seus consumidores, e sempre que um novo Observer se inscrever, ele receberá imediatamente o 'valor atual' do BehaviorSubject.",
			"BehaviorSubjects são úteis para representar 'valores ao longo do tempo'. Por exemplo, um fluxo de eventos de aniversários é um subject, mas o fluxo da idade de uma pessoa seria um BehaviorSubject."
		],
		"tips": [
			"tem valor inicial",
			"emitir mudanças",
			"notificar mudanças",
			"multicast",
			"notifica sempre que há mudanças",
			"iniciar com um valor"
		],
		"listOfImages": ["behavior-subject-1"]
	}
]
